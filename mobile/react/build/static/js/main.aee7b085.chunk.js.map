{"version":3,"sources":["lib/redux.js","components/Task.js","components/TaskList.js","components/InboxScreen.js","App.js","serviceWorker.js","index.js"],"names":["actions","taskStateReducer","taskState","state","action","Object","objectSpread","tasks","map","task","id","createStore","type","title","Task","_ref","_ref$task","onArchiveTask","onPinTask","react_default","a","createElement","className","concat","defaultChecked","disabled","name","onClick","value","readOnly","placeholder","style","text-overflow","event","stopPropagation","console","log","PureTaskList","loading","events","LoadingRow","length","tasksInOrder","toConsumableArray","filter","t","components_Task","assign","key","defaultProps","connect","_ref2","dispatch","archiveTask","pinTask","PureInboxScreen","error","TaskList","App","es","store","InboxScreen","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aee7b085.chunk.js","sourcesContent":["// A simple redux store/actions/reducer implementation.\n// A true app would be more complex and separated into different files.\nimport { createStore } from 'redux';\n\n// The actions are the \"names\" of the changes that can happen to the store\nexport const actions = {\n    ARCHIVE_TASK: 'ARCHIVE_TASK',\n    PIN_TASK: 'PIN_TASK',\n};\n\n// The action creators are how you bundle actions with the data required to execute them\nexport const archiveTask = id => ({ type: actions.ARCHIVE_TASK, id });\nexport const pinTask = id => ({ type: actions.PIN_TASK, id });\n\n// All our reducers simply change the state of a single task.\nfunction taskStateReducer(taskState) {\n    return (state, action) => {\n        return {\n            ...state,\n            tasks: state.tasks.map(\n                task => (task.id === action.id ? { ...task, state: taskState } : task)\n            ),\n        };\n    };\n}\n\n// The reducer describes how the contents of the store change for each action\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case actions.ARCHIVE_TASK:\n            return taskStateReducer('TASK_ARCHIVED')(state, action);\n        case actions.PIN_TASK:\n            return taskStateReducer('TASK_PINNED')(state, action);\n        default:\n            return state;\n    }\n};\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n    { id: '1', title: 'Something', state: 'TASK_INBOX' },\n    { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n    { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n    { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\n// We export the constructed redux store\nexport default createStore(reducer, { tasks: defaultTasks });","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Task({ task: { id, title, state }, onArchiveTask, onPinTask }) {\n    return (\n        <div className={`list-item ${state}`}>\n            <label className=\"checkbox\">\n                <input\n                    type=\"checkbox\"\n                    defaultChecked={state === 'TASK_ARCHIVED'}\n                    disabled={true}\n                    name=\"checked\"\n                />\n                <span className=\"checkbox-custom\" onClick={() => onArchiveTask(id)} />\n            </label>\n            <div className=\"title\">\n                <input type=\"text\" value={title} readOnly={true} placeholder=\"Input title\" style={{ 'text-overflow': 'ellipsis' }} />\n            </div>\n\n            <div className=\"actions\" onClick={event => event.stopPropagation()}>\n                {state !== 'TASK_ARCHIVED' && (\n                    <a onClick={() => onPinTask(id)}>\n                        <span className={`icon-star`} />\n                    </a>\n                )}\n            </div>\n        </div>\n    );\n}\n\nTask.propTypes = {\n    task: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        state: PropTypes.string.isRequired,\n    }),\n    onArchiveTask: PropTypes.func,\n    onPinTask: PropTypes.func,\n};\n\nTask.onArchiveTask = function (id) {\n    console.log(\"Achive Task!\" + id);\n}\n\nTask.onPinTask = function (id) {\n    console.log(\"pin Task!\" + id);\n}\nexport default Task;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Task from './Task';\nimport { connect } from 'react-redux';\nimport { archiveTask, pinTask } from '../lib/redux';\n\nexport function PureTaskList({ loading, tasks, onPinTask, onArchiveTask }) {\n    const events = {\n        onPinTask,\n        onArchiveTask,\n    };\n\n    if (loading) {\n        const LoadingRow = (\n            <div className=\"loading-item\">\n                <span className=\"glow-checkbox\" />\n                <span className=\"glow-text\">\n                    <span>Loading</span> <span>cool</span> <span>state</span>\n                </span>\n            </div>\n        );\n\n        return (\n            <div className=\"list-items\">\n                {LoadingRow}\n                {LoadingRow}\n                {LoadingRow}\n                {LoadingRow}\n                {LoadingRow}\n                {LoadingRow}\n            </div>\n        );\n    }\n\n    if (tasks.length === 0) {\n        return (\n            <div className=\"list-items\">\n                <div className=\"wrapper-message\">\n                    <span className=\"icon-check\" />\n                    <div className=\"title-message\">You have no tasks</div>\n                    <div className=\"subtitle-message\">Sit back and relax</div>\n                </div>\n            </div>\n        );\n    }\n\n    const tasksInOrder = [\n        ...tasks.filter(t => t.state === 'TASK_PINNED'),\n        ...tasks.filter(t => t.state !== 'TASK_PINNED'),\n    ];\n\n    return (\n        <div className=\"list-items\">\n            {tasksInOrder.map(task => <Task key={task.id} task={task} {...events} />)}\n        </div>\n    );\n}\nPureTaskList.propTypes = {\n    loading: PropTypes.bool,\n    tasks: PropTypes.arrayOf(Task.propTypes.task).isRequired,\n    onPinTask: PropTypes.func.isRequired,\n    onArchiveTask: PropTypes.func.isRequired,\n};\n\nPureTaskList.defaultProps = {\n    loading: false,\n};\n\nexport default connect(\n    ({ tasks }) => ({\n        tasks: tasks.filter(t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'),\n    }),\n    dispatch => ({\n        onArchiveTask: id => dispatch(archiveTask(id)),\n        onPinTask: id => dispatch(pinTask(id)),\n    })\n)(PureTaskList);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport TaskList from './TaskList';\n\nexport function PureInboxScreen({ error }) {\n    if (error) {\n        return (\n            <div className=\"page lists-show\">\n                <div className=\"wrapper-message\">\n                    <span className=\"icon-face-sad\" />\n                    <div className=\"title-message\">Oh no!</div>\n                    <div className=\"subtitle-message\">Something went wrong</div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"page lists-show\">\n            <nav>\n                <h1 className=\"title-page\">\n                    <span className=\"title-wrapper\">Taskbox</span>\n                </h1>\n            </nav>\n            <TaskList />\n        </div>\n    );\n}\n\nPureInboxScreen.propTypes = {\n    error: PropTypes.string,\n};\n\nPureInboxScreen.defaultProps = {\n    error: null,\n};\n\nexport default connect(({ error }) => ({ error }))(PureInboxScreen);","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './lib/redux';\nimport InboxScreen from './components/InboxScreen';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <InboxScreen />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n\n\n\n// import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// class App extends Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn Create React App\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}